#!/bin/bash

. k8s-read-config

apply-files() {
    declare -a files="${!1}"
    local file sha_file

    echo "array \"${files[@]}\""
    echo "array \"${!files[@]}\""
    for file in "${files[@]}"; do
      echo "Deploying file: ${file}"
      echo "Appending ${CI_SHA1} to filename: ${file}"
      sha_file=${file}-${CI_SHA1}
      cp "${file}" "${sha_file}"
      echo "Applying ${sha_file}"
      kubectl apply -f ${sha_file} --namespace=$NAMESPACE --record
      if [ $? -ne 0 ]
      then
        echo "Apply failed, aborting"
        exit 1
      fi
    done
}

create-if-needed-() {
    declare resource_type=$1 resources="${!2}" files="${!3}"
    local resource file sha_file

    for index in "${!files[@]}"; do
      resource="${resources[index]}"
      file="${files[index]}"
      kubectl get "${resource_type}" "${resource}" --namespace="$NAMESPACE" &>/dev/null
      if [ $? -ne 0 ]
      then
       echo "${resource_type} ${resource} does not exist yet, creating it"
       kubectl create -f "${file}" --namespace=$NAMESPACE --record
       if [ $? -ne 0 ]
       then
         echo "Create failed, aborting"
         exit 1
       fi
      else
       echo "${resource_type} ${resource} already exists"
      fi
    done
}

echo "Deploying ConfigMaps"
# apply-files CONFIGMAP_FILES
echo "Done deploying ConfigMaps"
echo ""

echo "Deploying Secrets" "\"${SECRET_FILES}\""
apply-files SECRET_FILES[@]
echo "Done deploying Secrets"
echo ""

echo "Deploying Services"
create-if-needed service SERVICES SERVICE_FILES
echo "Done deploying Services"
echo ""

echo "Deploying Jobs"
create-if-needed job JOBS JOBS_FILES
echo "Done deploying Job"
echo ""

echo "Deploying Ingress Resources"
create-if-needed ingress INGRESSES INGRESS_FILES
echo "Done deploying Ingress Resources"
echo ""

echo "Deploying Blocking Jobs"
for index in "${!BLOCKING_JOBS_FILES[@]}"
do
  BLOCKING_JOB=${BLOCKING_JOBS[$index]##*/}
  BLOCKING_JOB_FILE=${BLOCKING_JOBS_FILES[$index]}

  # If we are runnin in CI, replace :latest with the CI_SHA1
  if [ -n "$CI_SHA1" ]
  then
    echo "Updating image tag from latest to ${CI_SHA1} for ${BLOCKING_JOB_FILE}"
    sed 's/:latest/':${CI_SHA1}'/g;' ${BLOCKING_JOB_FILE} > ${BLOCKING_JOB_FILE}-${CI_SHA1}
    echo "Updating ${BLOCKING_JOB_FILE}-${CI_SHA1}"
    BLOCKING_JOB_FILE=${BLOCKING_JOB_FILE}-${CI_SHA1}
  fi

  kubectl get job ${BLOCKING_JOB} --namespace=$NAMESPACE &>/dev/null
  if [ $? -ne 0 ]
  then
   echo "Blocking Job ${BLOCKING_JOB} does not exist yet, creating it"
   kubectl create -f ${BLOCKING_JOB_FILE} --record --namespace=$NAMESPACE
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  fi
  kubectl apply -f ${BLOCKING_JOB_FILE} --namespace=$NAMESPACE
  if [ $? -ne 0 ]
  then
    echo "Apply failed, aborting"
    exit 1
  fi
done
echo "Done deploying Blocking Jobs"
echo ""

echo "Running Blocking Jobs"
for index in "${!BLOCKING_JOBS[@]}"
do
  BLOCKING_JOB=${BLOCKING_JOBS[$index]##*/}
  echo "Checking jobs for $BLOCKING_JOB"
  timeout.sh -t ${BLOCKING_JOB_TIMEOUT} run-blocking-job $BLOCKING_JOB $NAMESPACE
  result=$?
  if [ "$result" == "143" ] ; then
      echo "------- BLOCKING JOB TIMEOUT FAIL --------"
      exit 1
  fi
  if [ "$result" == "0" ] ; then
    echo "BLOCKING JOB SUCCESFULL"
  else
    echo "BLOCKING JOB FAILED"
    exit $result
  fi
done
echo ""

echo "Deploying Deployments"
for index in "${!DEPLOYMENT_FILES[@]}"
do
  DEPLOYMENT=${DEPLOYMENTS[$index]##*/}
  DEPLOYMENT_FILE=${DEPLOYMENT_FILES[$index]}
  kubectl get deployment ${DEPLOYMENT} --namespace=$NAMESPACE &>/dev/null
  if [ $? -ne 0 ]
  then
   echo "Deployment ${DEPLOYMENT} does not exist yet, creating it"
   kubectl create -f ${DEPLOYMENT_FILE} --record --namespace=$NAMESPACE
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  fi
  if [ -n "$CI_SHA1" ]
  then
    echo "Updating image tag from latest to ${CI_SHA1} for ${DEPLOYMENT_FILE}"
    sed 's/:latest/':${CI_SHA1}'/g;' ${DEPLOYMENT_FILE} > ${DEPLOYMENT_FILE}-${CI_SHA1}
    echo "Updating ${DEPLOYMENT_FILE}-${CI_SHA1}"
    DEPLOYMENT_FILE=${DEPLOYMENT_FILE}-${CI_SHA1}
  fi
  kubectl apply -f ${DEPLOYMENT_FILE} --namespace=$NAMESPACE
  if [ $? -ne 0 ]
  then
    echo "Apply failed, aborting"
    exit 1
  fi

done
echo "Done deploying Deployments"
echo ""

echo "Verifying successful deployments"
for index in "${!DEPLOYMENTS[@]}"
do
  DEPLOYMENT=${DEPLOYMENTS[$index]##*/}
  echo "Checking deployment for $DEPLOYMENT"
  timeout.sh -t ${DEPLOY_TIMEOUT} verify-deployment $DEPLOYMENT $NAMESPACE
  result=$?
  if [ "$result" == "143" ] ; then
      echo "------- DEPLOYMENT TIMEOUT FAIL --------"
      exit 1
  fi
  if [ "$result" == "0" ] ; then
    echo "DEPLOY SUCCESFULL"
  else
    echo "DEPLOY FAILED"
    exit $result
  fi
done

echo "All objects created"
echo ""
